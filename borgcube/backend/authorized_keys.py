from atomicwrites import atomic_write
from borgcube.backend.config import cfg as _cfg
from borgcube.enum import AuthorizedKeyType, RemoteCommandType


class AuthorizedKeysFile(object):
    def __init__(self, users):
        self.users = users

    @staticmethod
    def get_key_options(user, key_type, repo=None):
        options = [
            'restrict',
            f'environment="BORGCUBE_KEY_TYPE={key_type.value}"',
            f'environment="BORGCUBE_USER={user.id}"'
        ]
        if key_type in [AuthorizedKeyType.REPO_APPEND, AuthorizedKeyType.REPO_RW]:
            options += [
                f'environment="BORGCUBE_REPO={repo.id}"',
                f'command="{RemoteCommandType.BORGCUBE_COMMAND_BORG_SERVE.value}"'
            ]
        else:
            options += [
                f'command="{RemoteCommandType.BORGCUBE_COMMAND_SHELL.value}"'
            ]
        return ','.join(options)

    def get_authorized_keys_str(self):
        s = '# THIS FILE IS AUTOGENERATED BY BORGCUBE. DO NOT EDIT!\n'
        for user in self.users:
            s += f'\n### USER: {user.name}\n'
            if user.ssh_key:
                s += f'# USER KEY\n'
                s += f'{AuthorizedKeysFile.get_key_options(user, AuthorizedKeyType.USER)} '
                s += f'{user.ssh_key.keydata}\n'
            if user.backup_ssh_key:
                s += f'# USER BACKUP KEY\n'
                s += f'{AuthorizedKeysFile.get_key_options(user, AuthorizedKeyType.USER_BACKUP)} '
                s += f'{user.backup_ssh_key.keydata}\n'
            s += '\n'
            for repo in user.repos:
                s += f'## REPO: {repo.name}\n'
                if repo.append_ssh_key:
                    s += f'# Append key\n'
                    s += f'{AuthorizedKeysFile.get_key_options(user, AuthorizedKeyType.REPO_APPEND, repo=repo)} '
                    s += f'{repo.append_ssh_key.keydata}\n'
                if repo.rw_ssh_key:
                    s += f'# R/W key\n'
                    s += f'{AuthorizedKeysFile.get_key_options(user, AuthorizedKeyType.REPO_RW, repo=repo)} '
                    s += f'{repo.rw_ssh_key.keydata}\n'
            s += '\n'
            return s

    def save_atomic(self):
        with atomic_write(_cfg['authorized_keys_file'], overwrite=True) as f:
            f.write(self.get_authorized_keys_str())
